# resume or fork a training from a checkpoint last.ckpt or specified in hardware.files.warm_start
run_id: null
fork_run_id: null
load_weights_only: null # only load model weights, do not restore optimiser states etc.

lightning_module:
  _target_: ??

# run in deterministic mode ; slows down
deterministic: False

# miscellaneous
float32_matmul_precision: high
precision: bf16-mixed

# multistep input
# 1 = single step scheme, X(t-1) used to predict X(t)
# k > 1: multistep scheme, uses [X(t-k), X(t-k+1), ... X(t-1)] to predict X(t)
# Deepmind use k = 2 in their model
multistep_input: 2

num_sanity_val_steps: 0  # start training directly

# gradient accumulation across K batches, K >= 1 (if K == 1 then no accumulation)
# the effective batch size becomes num-devices * batch_size * k
accum_grad_batches: 1

# clip gradients, 0 : don't clip, default algorithm: norm, alternative: value
gradient_clip:
  val: 32.
  algorithm: norm

# stochastic weight averaging
# https://pytorch.org/blog/stochastic-weight-averaging-in-pytorch/
swa:
  enabled: False
  lr: 1.e-4

# use ZeroRedundancyOptimizer ; saves memory for larger models
zero_optimizer: False

# dynamic rescaling of the loss gradient
# see https://arxiv.org/pdf/2306.06079.pdf, section 4.3.2
# don't enable this by default until it's been tested and proven beneficial
loss_gradient_scaling: False

# length of the "rollout" window (see Keisler's paper)
rollout:
  start: 1
  # increase rollout every n epochs
  epoch_increment: 0
  # maximum rollout to use
  max: 1

max_epochs: 200
max_steps: null

# TODO: Eventually move this to use the hydra initialize in order to test memory effecient optimizers

optimizer:
  weight_decay: 1e-8
  lr: 0.625e-4
  scale_by_gpus: False

scheduler:
  lr_min: 1.0e-7
  iterations: auto # defaults to number of (steps in an epoch * max_epochs) #TODO: make sure this logic is implemented
  warmup_t: 0.1 # TODO: ensure this is implemented correctly

# Changes in per-gpu batch_size should come with a rescaling of the local_lr
# in order to keep a constant global_lr
# global_lr = local_lr * num_gpus_per_node * num_nodes / gpus_per_model

feature_weighting:
  default: 1
  pl:
    q: 1.0
    t: 1.0
    u: 1.0
    v: 1.0
    w: 1.0
    z: 1.0
  sfc:
    2t: 1.0
    msl: 0.1
    10u: 0.1
    10v: 0.1
    sp: 0.1
    2d: 0.1
    tp: 0.1
    cp: 0.1
  inverse_tendency_variance_scaling: False

loss: 
  _target_: anemoi.training.losses.MSELoss
  _convert_: all


validation_metrics:
  variables:
    - all_individual
    - all_grouped
    # - z_500
    # - t_850
    # - u_850
    # - v_850
  metrics: # list of metric classes
    -
      _target_: anemoi.training.losses.WeightedMAELoss
    -
      _target_: anemoi.training.losses.WeightedMSELoss




pressure_level_scaler:
  _target_: anemoi.training.data.scaling.LinearPressureLevelScaler
  minimum: 0.0 # only rely on slope ...
  slope: 0.0001659751037 # 1./6025 -> 1./sum(1000, 925, 850, 700, 600, 500, 400, 300, 250, 200, 150, 100, 50)


tendency_mode: false

num_saniity_val_steps: 4